// front/src/pages/Admin.tsx
import React from "react";
import {
  getAdminAdvanceRequests,
  approveAdvanceRequests,
  rejectAdvanceRequests,
} from "../lib/api";
import Swal from "sweetalert2";

type AdvanceRequest = {
  id: number;
  clienteId: number;
  contratoId: number;
  status: "PENDENTE" | "AGUARDANDO_APROVACAO" | "APROVADO" | "REPROVADO";
  notes?: string | null;
  createdAt: string;
  approvedAt?: string | null;
};

function coerceList(res: unknown): AdvanceRequest[] {
  if (!res) return [];
  if (Array.isArray(res)) return res as AdvanceRequest[];
  if (typeof res === "object") {
    const anyRes = res as { value?: unknown; items?: unknown };
    if (Array.isArray(anyRes.value)) return anyRes.value as AdvanceRequest[];
    if (Array.isArray(anyRes.items)) return anyRes.items as AdvanceRequest[];
  }
  return [];
}

export default function Admin() {
  const [data, setData] = React.useState<AdvanceRequest[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);
  const [selectedMap, setSelectedMap] = React.useState<Record<number, boolean>>({});
  const [busy, setBusy] = React.useState<"approve" | "reject" | null>(null);

  const selected = React.useMemo(
    () => Object.entries(selectedMap).filter(([, v]) => v).map(([k]) => Number(k)),
    [selectedMap]
  );

  const allPending = React.useMemo(
    () => data.filter((d) => d.status === "PENDENTE" || d.status === "AGUARDANDO_APROVACAO"),
    [data]
  );
  const allSelected = allPending.length > 0 && selected.length === allPending.length;

  async function load() {
    try {
      setLoading(true);
      setError(null);
      const res = await getAdminAdvanceRequests();
      // Ordena: PENDENTE primeiro (mais recentes no topo), depois demais
      const list = coerceList(res).sort((a, b) => {
        if (a.status !== b.status) {
          if (a.status === "PENDENTE") return -1;
          if (b.status === "PENDENTE") return 1;
        }
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      });
      setData(list);
    } catch (e: any) {
      const msg = e?.response?.data?.message || e?.message || "Falha ao carregar solicitações.";
      setError(msg);
    } finally {
      setLoading(false);
    }
  }

  React.useEffect(() => {
    load();
  }, []);

  function toggle(id: number) {
    // Somente pendentes podem ser selecionadas
    const row = data.find((d) => d.id === id);
    if (!row || row.status !== "PENDENTE") return;
    setSelectedMap((prev) => ({ ...prev, [id]: !prev[id] }));
  }

  function toggleAll() {
    if (allSelected) {
      setSelectedMap({});
    } else {
      const next: Record<number, boolean> = {};
      allPending.forEach((d) => (next[d.id] = true));
      setSelectedMap(next);
    }
  }

  async function confirmAction(kind: "approve" | "reject", count: number) {
    const title = kind === "approve" ? "Aprovar selecionadas?" : "Reprovar selecionadas?";
    const text =
      kind === "approve"
        ? `Você vai aprovar ${count} solicitação(ões). Confirmar?`
        : `Você vai reprovar ${count} solicitação(ões). Confirmar?`;
    const confirmButtonText = kind === "approve" ? "Sim, aprovar" : "Sim, reprovar";

    const res = await Swal.fire({
      title,
      text,
      icon: "question",
      showCancelButton: true,
      confirmButtonText,
      cancelButtonText: "Cancelar",
      reverseButtons: true,
    });
    return res.isConfirmed;
  }

  async function doApprove() {
    if (!selected.length) return;
    if (!(await confirmAction("approve", selected.length))) return;
    try {
      setBusy("approve");
      await approveAdvanceRequests(selected);
      setSelectedMap({});
      await load();
      await Swal.fire({ icon: "success", title: "Aprovado!", text: "Solicitações aprovadas." });
    } catch (e: any) {
      await Swal.fire({
        icon: "error",
        title: "Erro ao aprovar",
        text: e?.response?.data?.message || e?.message || "Tente novamente.",
      });
    } finally {
      setBusy(null);
    }
  }

  async function doReject() {
    if (!selected.length) return;
    if (!(await confirmAction("reject", selected.length))) return;
    try {
      setBusy("reject");
      // Nota: se o backend ainda não suportar reprovar no mesmo endpoint, o catch mostrará o aviso.
      await rejectAdvanceRequests(selected);
      setSelectedMap({});
      await load();
      await Swal.fire({ icon: "success", title: "Reprovado!", text: "Solicitações reprovadas." });
    } catch (e: any) {
      await Swal.fire({
        icon: "warning",
        title: "Reprovação indisponível",
        text:
          e?.response?.data?.message ||
          e?.message ||
          "O backend pode não suportar reprovação ainda.",
      });
    } finally {
      setBusy(null);
    }
  }

  const approveTitle =
    selected.length > 0 ? `Aprovar ${selected.length} selecionada(s)` : "Selecione ao menos 1 (PENDENTE)";
  const rejectTitle =
    selected.length > 0 ? `Reprovar ${selected.length} selecionada(s)` : "Selecione ao menos 1 (PENDENTE)";

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <div className="flex items-center justify-between mb-4">
        <h1 className="text-2xl font-bold">Solicitações — Aprovador</h1>
        <div className="flex gap-2">
          <button
            onClick={doApprove}
            disabled={!selected.length || busy !== null}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50"
            title={approveTitle}
          >
            {busy === "approve" ? "Aprovando..." : "Aprovar Selecionadas"}
          </button>

          <button
            onClick={doReject}
            disabled={!selected.length || busy !== null}
            className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 disabled:opacity-50"
            title={rejectTitle}
          >
            {busy === "reject" ? "Reprovando..." : "Reprovar Selecionadas"}
          </button>

          <button
            onClick={load}
            disabled={loading}
            className="border px-4 py-2 rounded hover:bg-gray-50 disabled:opacity-50"
            title="Atualizar lista"
          >
            {loading ? "Atualizando..." : "Atualizar"}
          </button>
        </div>
      </div>

      {error && (
        <div className="mb-4 rounded-md border border-red-300 bg-red-50 p-3 text-red-700">
          {error}
        </div>
      )}

      <div className="p-4 border rounded bg-white">
        {loading ? (
          <p>Carregando...</p>
        ) : data.length === 0 ? (
          <p>Nenhuma solicitação encontrada.</p>
        ) : (
          <table className="w-full text-left border-collapse">
            <thead>
              <tr className="border-b">
                <th className="py-2 w-8">
                  {/* Select all apenas pendentes */}
                  <input type="checkbox" checked={allSelected} onChange={toggleAll} />
                </th>
                <th className="py-2">ID</th>
                <th className="py-2">Cliente</th>
                <th className="py-2">Contrato</th>
                <th className="py-2">Status</th>
                <th className="py-2">Criado em</th>
                <th className="py-2">Aprovado em</th>
                <th className="py-2">Obs.</th>
              </tr>
            </thead>
            <tbody>
              {data.map((r) => {
                const isPending = (r.status === "PENDENTE" || r.status === "AGUARDANDO_APROVACAO");
                return (
                  <tr key={r.id} className="border-b">
                    <td className="py-2">
                      <input
                        type="checkbox"
                        checked={!!selectedMap[r.id]}
                        onChange={() => toggle(r.id)}
                        disabled={!isPending}
                        title={isPending ? "Selecionar" : "Somente PENDENTE pode ser selecionada"}
                      />
                    </td>
                    <td className="py-2">{r.id}</td>
                    <td className="py-2">#{r.clienteId}</td>
                    <td className="py-2">#{r.contratoId}</td>
                    <td className="py-2">
                      <span
                        className={
                          "px-2 py-1 rounded text-xs " +
                          (r.status === "PENDENTE"
                            ? "bg-yellow-100 text-yellow-800"
                            : r.status === "APROVADO"
                            ? "bg-green-100 text-green-800"
                            : "bg-red-100 text-red-800")
                        }
                      >
                        {r.status}
                      </span>
                    </td>
                    <td className="py-2">{new Date(r.createdAt).toLocaleString()}</td>
                    <td className="py-2">
                      {r.approvedAt ? new Date(r.approvedAt).toLocaleString() : "—"}
                    </td>
                    <td className="py-2">{r.notes || "—"}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}




